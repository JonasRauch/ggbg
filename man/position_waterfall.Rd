% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/position-waterfall.R
\name{position_waterfall}
\alias{position_waterfall}
\title{Stack Chart Elements on Cumulative Value}
\usage{
position_waterfall(width = NULL, preserve = c("total", "single"),
  reverse = FALSE, dodge = TRUE, vjust = 0.5, vjust.mode = "end",
  signif = getOption("ggbg.signif"))
}
\arguments{
\item{width}{Dodging width, when different to the width of the individual
elements. This is useful when you want to align narrow geoms with wider
geoms. See the examples.}

\item{preserve}{Should dodging preserve the total width of all elements
at a position, or the width of a single element?}

\item{reverse}{If \code{TRUE}, will reverse the default stacking order.
This is useful if you're rotating both the plot and legend.}

\item{dodge}{TRUE (default) or FALSE, controls how to resolve
groups that overlap on the \code{x} axis.  The default is to dodge them
to form mini-waterfalls within each \code{x} value, but you can chose to stack
them instead by setting \code{dodge=FALSE}.  Negative and positive values are
segregated prior to stacking so they do not overlap.  Interpreting
waterfall charts with stacked sub-groups is difficult when they contain
negative values, so we recommend you use the default setting instead.
Observations within a group that have the same \code{x} value are always
stacked, so if you have both positive and negative values for any given \code{x}
value you may want to consider segregating the positives and negatives in
different groups.}

\item{vjust}{like the \code{vjust} parameter for \code{\link[ggplot2:position_stack]{ggplot2::position_stack}},
except that by default the direction of justification follows the direction
of the bar (see \code{vjust.mode}), and the default value is \code{0.5} instead of
\code{1}.  This only has an effect on geoms with positions like text, points, or
lines.  The default setting places elements midway through the height of
the corresponding waterfall step.  The default value is convenient for
labeling \code{geom_col} waterfalls.  Use \code{1} to position at the "end" of each
waterfall step.  This is different to the \code{vjust} for geoms like
\code{geom_text} where \code{vjust=1} shift the text down, but it is consistent with
what \code{\link[gggplot2:position_stack]{gggplot2::position_stack}} does.}

\item{vjust.mode}{character(1L), one of "end" (default), or "top" where "top"
results in the same behavior as in \code{\link[ggplot2:position_stack]{ggplot2::position_stack}}.  "end"
means the justification is relative to the "end" of the waterfall bar.  So
if a waterfall bar is heading down (i.e. negative \code{y} value), the "end" is
at the bottom.  If it heading up (i.e. positive \code{y} value), the "end" is at
the top.  For positive \code{y} values "end" and "top" do the same thing.}

\item{dodge}{TRUE or FALSE (default), whether to dodge waterfall bars when
there are multiple bars for a single x value.}
}
\description{
A waterfall chart is a bar chart where each segment starts where the prior
segment left off.  This is similar to a stacked bar chart, except that
the stacking does not reset across \code{x} values.  In effect, it is the
visualization of a cumulative sum.  Another similar type of chart is the
candle stick plot, except those have "whiskers" and typically require you to
manually specify the \code{ymin} and \code{ymax} values.
}
\details{
\code{position_waterfall} creates waterfall charts when it is applied to
\code{geom_col} or \code{geom_bar}.  You can apply it to any geom, so long as the
geom specifies a \code{y} aesthetic, although there is no guarantee the result
will make sense for arbitrary geoms.  The stacking is always
computed from the \code{y} aesthetic.  The order of the stacking is determined by
the \code{x} aesthetic.

If only \code{xmin} and \code{xmax} aesthetics are present the \code{x} value will be
inferred as the midpoint of those two.  If the \code{xmin} and \code{xmax} aesthetics
are missing \code{position_waterfall} will attempt to infer them from \code{x} and the
provided or implicit \code{width}.

Since stat layers are computed prior to position adjustments, you can also
use \code{position_waterfall} with stats (e.g \code{stat_bin}, see examples).

We also implement a \link[=ggbg-ggproto]{StatWaterfall} \code{ggproto} object that
can be accessed within \code{geom_*} calls by specifying \code{stat='waterfall'}.
Unlike typical stat \code{ggproto} object, this one does not have a layer
instantiation function (i.e. \code{stat_waterfall} does not exist).  The sole
purpose of the stat is to compute the \code{ycum} aesthetic that can then be used
by the \code{geom} layer (see the labeling examples).

Most \code{position_*} adjustments modify positions of groups that otherwise
would occupy the same space, leaving relative positions of groups unchanged.
\code{position_waterfall} is different in as much as it also changes relative
positions of groups that would normally not occupy the same space.
}
\section{Dodging}{


Unlike most \code{position_*} adjustments, \code{position_waterfall} adjust positions
across different \code{x} values.  However, we still need to resolve \code{x}
value overlaps.  The default approach is to apply the same type of adjustment
across groups within any given \code{x} value.  This stacks and dodges elements.
The dodging is done based on any \code{xmin} / \code{xmax} aesthetics if they are
present, and if not based on the \code{width} aesthetic.

Dodging involves changing the \code{width} of the geom and also shifting the
\code{geom} horizontally.  Width adjustments will always be made based on the
\code{xmin}/\code{xmax}/\code{width} aesthetic, irrespective of whether you specify the
dodge \code{width} parameter of \code{position_waterfall}.  Horizontal shifts can be
controlled separately by using \code{position_waterfall(width=...)}.  Unlike the
\code{width} parameter specified via geom/stat \code{mapping} (e.g. \code{aes(width=...)}),
\code{position_waterfall(width=...)} affects only the horizontal shifting of
groups with equal \code{x} values.

Alternatively you can turn off dodging within \code{x} values by setting
\code{position_waterfall(dodge=FALSE)} which will result in stacking within each
\code{x} value.
}

\examples{
## These examples are best run via `example(position_waterfall)`
library(ggplot2)
dat <- data.frame(x=3:1, y=1:3)
p1 <- ggplot(dat, aes(x=x, y=y)) + geom_col(position='waterfall')

## Add text or labels; defaults to middle waterfall position
## which can be modified with `vjust`
p1 + geom_label(aes(label=x), position='waterfall')

## We can also add the cumulative running to the top of
## the bars with `stat='waterfall'` and position adjustments
p1 + geom_label(aes(label=x), position='waterfall') +
 geom_label(
   stat="waterfall",        # adds `ycum` computed variable
   aes(label=stat(ycum)),   # which we can use for label
   position=position_waterfall(vjust=1), # text to end of column
   vjust=0,                              # tweak so it's on top
)
## A poor person's candlestick chart:
dat.r.walk <- data.frame(x=1:20, y=rnorm(20))
ggplot(dat.r.walk, aes(x=x, y=y, fill=y > 0)) +
  geom_col(position='waterfall')

## We can use arbitrary geoms
ggplot(dat, aes(x=x, y=y)) +
  geom_point() +
  geom_point(position=position_waterfall(vjust=1), color='red')

## Or stats; here we turn a histogram into an ecdf plot
dat.norm <- data.frame(x=rnorm(1000))
ggplot(dat.norm, aes(x=x)) + geom_histogram(position='waterfall')
ggplot(dat.norm, aes(x=x)) + stat_bin(position='waterfall')

## Data with groups
dat3 <- data.frame(
  x=c(3, 2, 2, 2, 1, 1), y=c(-3, 1, 4, -6, -1, 10),
  grp=rep(c("A", "B", "C"), lenght.out=6)
)
p2 <- ggplot(dat3, aes(x=x, y=y, fill=grp))
p2 + geom_col(position="waterfall")

## Equal width columns
p2 + geom_col(position=position_waterfall(preserve='single'))

## Stacking groups is possible, bug hard to interpret when
## negative values present
p2 + geom_col(position=position_waterfall(dodge=FALSE))
}
